@page "/"

@if (!isRunning)
{
    <body>
        <div class="container">
            <div class="column ">
                <h2 @onclick="StartSession" class="button-text-run animacja point font">FOCUS</h2>
            </div>
            <div class="column">
                <h2 class="font second-text">@remainingMinutes</h2>
                <h2 class="font dwa">@remainingSeconds</h2>
            </div>
        </div>
    </body>
}

@if (isRunning && !isPaused)
{
    <body>
        <div class="container">
            <div class="column ">
                <h2 @onclick="PauseTimer" class="button-text-run animacja point font">PAUSE</h2>
            </div>
            <div class="column">
                <h2 class="font second-text">@remainingMinutes</h2>
                <h2 class="font dwa">@remainingSeconds</h2>
            </div>
        </div>
    </body>
}

@if (isRunning && isPaused)
{
    <body>
        <div class="container">
            <div class="column ">
                <h2 @onclick="ResetTimer" class="button-text animacja point">RESET</h2>
                <h2 @onclick="ResumeTimer" class="button-text animacja point">FOCUS</h2>
            </div>
            <div class="column">
                <h2 class="font second-text">@remainingMinutes</h2>
                <h2 class="font dwa">@remainingSeconds</h2>
            </div>
        </div>
    </body>
}

@code {

    private System.Timers.Timer timer;

    private TimeSpan studyTime = TimeSpan.FromMinutes(25); // 25 minutes of focus
    private TimeSpan breakTime = TimeSpan.FromMinutes(5);   // 5 minutes break
    private TimeSpan longBreakTime = TimeSpan.FromMinutes(30);   // 30 minutes long break
    private TimeSpan initialTime = TimeSpan.FromMinutes(25);
    private TimeSpan remainingTime = TimeSpan.FromMinutes(25);

    private int sessionCount = 1;

    private bool isRunning = false;
    private bool isPaused = false;

    private string currentState = "focus";

    private int remainingSeconds; 
    public int remainingMinutes = 25; 

    private void StartSession()
    {
        if (!isRunning)
        {
            initialTime = studyTime;
            remainingTime = initialTime;
            timer = new System.Timers.Timer(1000);
            timer.Elapsed += TimerElapsed;
            isRunning = true;
            isPaused = false;
            timer.Start();
        }
    }

    private void PauseTimer()
    {
        if (isRunning && !isPaused)
        {
            isPaused = true;
            timer.Stop();
        }
    }

    private void ResumeTimer()
    {
        if (isRunning && isPaused)
        {
            isPaused = false;
            timer.Start();
        }
    }

    private void ResetTimer()
    {
        isRunning = false;
        isPaused = false;
        timer.Stop();
        remainingTime = studyTime;
        currentState = "focus";
        sessionCount = 1;
        remainingSeconds = 0;
        remainingMinutes = 0;
    }

    private void TimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        if (remainingTime.TotalSeconds > 0 && !isPaused)
        {
            remainingSeconds = remainingTime.Seconds;
            remainingMinutes = remainingTime.Minutes;

            remainingTime = remainingTime.Subtract(TimeSpan.FromSeconds(1));
        }
        else
        {
            if (currentState == "focus")
            {
                currentState = (sessionCount % 4 == 0) ? "longBreak" : "break";
                initialTime = (sessionCount % 4 == 0) ? longBreakTime : breakTime;
            }
            else
            {
                currentState = "focus";
                initialTime = studyTime;
                sessionCount++;

                if (sessionCount > 4)
                {
                    sessionCount = 1;
                    ResetTimer();
                }
            }

            isPaused = false;
            remainingTime = initialTime;

            remainingSeconds = remainingTime.Seconds;
            remainingMinutes = remainingTime.Minutes;
        }

        InvokeAsync(StateHasChanged);
    }
}

